##################git_github_usage.doc##########
desc: record theory,command,example about how to use git and github
creat time: 2021.03.10 16:49
author:coast
last change:
###########
##
工作区:working space (working tree)
    新建文件但还从未add、commit提交过---untracked 未被跟踪的
    未修改但提交过          ---unmodified---|
    修改但未add添加         -----modified---|-->三个都叫tracked被跟踪的，git status显示这三个状态。
暂存区：                                    |
    修改后add但未commit提交 -------staged---|
仓库：repository
    提交入库但未提交删除的文件
    
# ####
###最简单的使用:
> 创建一个新文件readme.md 并提交到仓库
"切换建库目录
cd ~/program/git_repos/
"创建一个名为gitusage的repository(仓库)
git init gitusage "新建的库第一次提交后有个默认的分支master
"切换仓库的工作台，即仓库目录,我们接下的所有命令在此操作。
cd ~/progam/git_repos/gitusage
"设置所有库的用户名，coast
git config --global user.name "coast"
"设置该库的邮箱，github共享是基于邮箱名的
git config --local  user.email "zitenfe@gmail"

"查看仓库的用户和邮箱设置正确与否。
git config user.name
git config user.enail

"查看所有已提交在仓库的文件
git ls-tree --full-tree -r --name-only HEAD 
"查看所有在仓库(已被跟踪)的文件，包括新建文件后添加到了暂存区但未提交的文件。
git ls-file

"创建一个新文件，此时这个文件状态为<未被跟踪>
touch readme.md 

"印证一下:
ls "显示readme.md文件,即刚才新建的文件只是在工作区，
git ls-files “此时仍不显示readme.md文件
git ls-tree --full-tree -r --name-only HEAD "同上

"查询当前库-当前分支的：
"未被跟踪文件(新建文件)
"尚未暂存的变更(旧文件修改但未add)
“已暂存但未提交的变更(已add但未commit)
git status "显示我们有一个未被跟踪的新建文件readme.md

"add添加到暂存区(生成index)，此时文件为<已被跟踪>.git
git add readme.md git ls-files “此时显示readme.md文件;git add . 表add示当前所有变更文件××。
git ls-tree --full-tree -r --name-only HEAD "不显示，因为这个新文件虽然add但从未被commit提交
"add后，我们commit提交到这个库里去
git commit readme.md -m "docs:added readme.md"   ”不指定就是提交所有暂存区的文件;必须-m 填写提交注释信息message
git ls-tree --full-tree -r --name-only HEAD "显示readme.md文件了

"显示当前库的所有分支和当前所在文件
git branch "显然此时在master分支，也只有这一个分支。
git log master "master分支的提交记录。不指定则显示当前库所有分支提交记录

> 修改已经在仓库里的文件readme.md并测试git中文件checkout、rm、reset功能。
vim readme.md "为空文件
echo "#测试git checkout 文件" >>readme.md
git status "显示修改了readme.md,但未暂存。
vim readme.md "有增加一行的改动，但是并未提交到仓库
git checkout readme.md "丢弃刚才在工作区的改动，签回到上次提交的版本(上次提交的是个新建的空文件)
vim readme.md "此时为空文件。

echo "#此时git rm 文件" >>readme.md 
git add readme.md "add到暂存区
git rm --cached readme.md "删除暂存区或该分支上的该文件。但工作区仍有这个文件。
“git rm readme.md " 连工作区的这个文件也删除。
vim readme.md "此时这个文件有上面那一行，但是该仓库的该分支没有这个文件了。

git status ”提示readme.md没有被跟踪
git add readme.md 
git commit readme.md
git log master "
git reset HEAD^ "回撤到add之前的状态;HEAD^^上上各版本，HEAD~10 第十次提交的哪个版本。
"git reset --soft HEAD^ "回撤到add之后，commit之前的状态。
"git reset --hard HEAD^ "回撤到add之前的状态，并且工作区的文件变更丢弃，变为上次提交的版本。
##diff
"diff 当前工作区和暂存区(已add但未commit)文件的区别.如果未add，则是比较工作区该文件更改前后区别
git diff readme.md "等价于git diff
"diff 当前暂存区和仓库文件的区别--staged 等价于--cached
git difftool --staged readme.md 
"diff 当前工作区和仓库的区别.commit可为HEAD或HEAD^或HEAD^^或HEAD~100上一百次或commit的sha hash值
git diff <commit> <filename> 
"diff 两次提交后仓库区别
git diff <commit> <commit>
"diff 仓库之间同一文件
git diff master bran readme.md

##恢复删除的文件
rm readme.md
"情况1：如果还未add,可以使用git checkout readme.md丢弃工作区的改变，是工作区的该文件恢复到当前版本
git checkout -- readme.md “get checkout 可以签回的改动。-- 表示后面是文件而不是分支名

"情况2：如果已经add 或add，commit，那只能使用版本回撤了
rm readme.md
git add . 
git commit -a -m "removed file:readme.md"
git reset HEAD^   "回撤到add之前的状态
git checkout readme.md "工作区签回到最新版本


#本地分支的新建、重命名、删除、暂存、合并
> 新建分支：
"比如本地库，突然在master分支工作时，接到一个添加新特色
"为了不影响master分支，我新建一个分支test
git branch testtt
>重命名分支 
git branch -m testtt test
>merge分支:
gti checkout master
git merge test "在master分支上合并test分支。merge自动选择合并规则
git log --graph --pretty=oneline --abbrev-commit "显示具体的合并过程
###
分支合并规范：
合并，就是保留双方分支的差异部分.
情况1：未分叉
在mater分支上创建test后，仅对test分支进行过提交，而master分支保持不变
此时merge结果：master分支的HEAD=test分支的HEAD--相当于双方合并
情况2：分叉
不仅test分支进行了提交，master分支也进行了提交。
此时merge结果：master HEAD、testHEAD、公共祖先的三方合并生成新合并版本。
当然如果这时发生合并冲突，则要手动解决这个冲突并提交。

master:a.txt b.txt___master----删除a，新增c_____merge test:c.txt d.txt
                 |___test------删除b，新增d_____|
####
>merge 撤销：
git relog "relog查看merge、reset、commit、checkout等哈希值信息(git log 只能查看commit)
git reset --hard 版本的哈希值 "
>分支的删除和恢复
"分支合并之后，可以删除test分支
git branch -d test
"突然想恢复刚才删除的test分支
git relog "查看最后一次test分支的提交后的test版本哈希值
git branch test tets最后一次提交后的版本哈希值 

> stash 暂存分支
"暂存当前分支,即保存当前工作区与当前版本的变更.
"!!stash 之后，1.git status 显示干净2.工作区文件的回撤到当前版本而不是保持现有变更。
git checkout bran "切换到bran分支
vim read.me "假设当前是一个已提交的文件
echo "新增一行">> readme.md 
git status "有未add的
git checkout master "尝试切换到master分支，但提示要不commit或stash
vim readme.md "此时该文件新增了"新增一行"

"stash 当前分支，去其他分支
git stash "暂存分支
git stash list "查看有哪些暂存分支
git status "干净的
vim readme.md "工作区回撤到当前版本--即不显示刚刚echo新增的"新增一行"
git checkout master "这下可以切换分支了

"继续工作
git check bran "
git stash pop "恢复(后删除)当前分支bran
git status   "这时又显示有未add的
vim  readme.md "这时又显示该文件末尾新增了"新增一行"
git add .
git commit -a -m "#inserted file:readme.md"

# git连接github远程仓库
> git 关联github上的远程仓库：
    " 确保本机和github服务器能ssh通信
    ssh-keygen -t rsa -C "zitenfe@163.com" "在～/.ssh目录下生成rsa公钥和私钥
    将上述公钥复制到github--setting--ssh key 内 "以便实现身份验证(本机能远程访问本人github帐号的仓库)和加密通信
    ssh -T git@github.com "测试远端github服务器的ssh连通性，选yes。
方法1：
    git init gitusage_github "本地仓库名
    git config user.name "coast"
    git config user.email "zitenfe@163.com"
    git remote add origin git@github.com:AKABeautifulPain/git_github_usage.git "本地仓库关联github仓库(别名origin)

方法2：
> 拉取指定远程仓库数据
    git remote -v "查看本地仓库关联的远程仓库。现在只关联了origin
    git branch -a "查看本地仓库所有分支，包括其fetch&&merge关联的远程分支
    git fetch origin "将本地仓库关联的远程仓库origin的所有分支信息
    git merge origin/main "将指定的远程仓库的指定分支与当前本地仓库的当前分支合并.--allow-unrelate-histories.
    "git pull orgin 远程分支:本地分支 " 相当于fetch&&merge，直接将本地分支(默认是当前本地分支)合并远程仓库origin的远程分支
> 推送数据到指定远程仓库：
    "push推送之前，应该pull拉取最新远程分支。因为向上推送时如果遇到分叉，会出现合并冲突错误
    git pull orgin远程分支:本地分支    
    "push 到远程分支，如果远程分支没有，则会(在github)建立该分支
    git push origin 本地分支：远程分支 "推送本地分支到指定远程仓库的指定分支(默认是与指定本地分支同名分支)




